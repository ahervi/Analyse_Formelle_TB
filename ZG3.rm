-- fichier ZG3.rm
-- protocole de non répudiation de Zhou & Gollmann 97 offline 2
----> perte de message
----> rétablissement
----> timers locaux
----> 1 timer global

-- initiateur honnête de la communication : Ah
-- participant honnête à la communication : Bh
-- tiers de confiance : 1/3_C

-- réseau à délai fini mais non fiable : reseau_delai_fini_non_fiable_A_B_Tiers
-- fiables : Ah <--> 1/3_C et Bh <--> 1/3_C ; non fiable : Ah <--> Bh

-- Introduction de timers représentés par des atomes : 
------ 3 Timers locaux :
---------- pour A : timerr_ATmsg2 armé après l'émission du premier message 
---------- pour A : timerr_ATmsg4 armé après l'émission du troisième message 
---------- pour B : timerr_B1 armé après l'émission du deuxième message
------ Un timer globale : timerr
-- Un seul module Horloge regroupant les timers


module Bh

	external 

		M1 , M3 : bool;

		TimeOut_ATmsg2, TimeOut_ATmsg4 : bool

	interface	

		pcB : (0..8);

		sendM2, sendM4 : bool;

		Mb , Kb, Tb, Cb : bool; 

		EOOb, EORb, EOOk_b, EORk_b : bool; 

		f_EOOb, f_EOOk_b, f_EORb, f_EORk_b, f_CONk_b : bool;

		STOPb : bool;

		timer_triggered_BTmsg3: bool

	

	atom B_honest

	controls

		pcB,

		sendM2,	sendM4,

		Mb, Kb, Tb, Cb,

		EOOb, EORb, EOOk_b, EORk_b,

		f_EOOb, f_EORb, f_EOOk_b, f_EORk_b, f_CONk_b,

		STOPb,

		timer_triggered_BTmsg3




	reads

		M1, M3,

		pcB,

		sendM2, sendM4,

		Mb, Kb, Cb, Tb,

		EOOb, EORb, EOOk_b, EORk_b,

		f_EOOb, f_EOOk_b, f_EORb, f_EORk_b, f_CONk_b,

		STOPb 

		

		

		

	init

		[] true -> 	

			pcB':=0;

			sendM2':= false; sendM4':= false;

			Mb':= false; Kb':= false; Tb':= false; Cb':= false;

			EOOb':= false; EORb':= false; EOOk_b':= false; EORk_b':= false;

			f_EOOb':= false; f_EORb':= true; f_EOOk_b':= false; f_EORk_b':= true; f_CONk_b' := false;

			STOPb':= false 

				



 	update 

-- réception de m1

	[] (pcB=0) & M1 -> f_EOOb':= true; EOOb':= true; pcB':=1; Cb' := true



-- calcul de EORb

	[] (pcB=1) & f_EOOb & EOOb & Cb -> f_EORb' := true; EORb':= true; pcB':=2



-- émission de m2

	[] (pcB=2) & f_EORb & EORb -> sendM2':= true; pcB':=3



-- réception de m3

	[] (pcB=3) & sendM2 & M3 -> f_EOOk_b':= true; EOOk_b':= true; Kb' := true; pcB':=4



-- calcul de EORk_b

	[] (pcB=4) & f_EOOk_b & EOOk_b & Kb -> f_EORk_b' := true; EORk_b':= true; pcB':=5



-- émission de m4

	[] (pcB=5) & f_EORk_b & Kb & EORk_b -> sendM4':= true; pcB':=6



-- arrêt de B

	[] (pcB=6) -> STOPb':=true; pcB':=7



endatom

endmodule





module Ah

	external 

		M2 , M4 : bool;

		TimeOut_ATmsg2, TimeOut_ATmsg4 : bool

	interface	

		pcA : (0..8);

		sendM1, sendM3 : bool;

		Ma , Ka, Ta, Ca : bool; 

		EOOa, EORa, EOOk_a, EORk_a : bool; 

		f_EOOa, f_EOOk_a, f_EORa, f_EORk_a : bool;

		STOPa : bool;

		TimeOut_ATmsg2, TimeOut_ATmsg4 : bool

	

	atom A_honest

	controls

		pcA,

		sendM1,	sendM3,

		Ma, Ka, Ta, Ca,

		EOOa, EORa, EOOk_a, EORk_a,

		f_EOOa, f_EORa, f_EOOk_a, f_EORk_a,

		STOPa



	reads

		M2, M4,

		pcA,

		sendM1, sendM3,

		Ma, Ka, Ca, Ta,

		EOOa, EORa, EOOk_a, EORk_a,

		f_EOOa, f_EOOk_a, f_EORa, f_EORk_a,

		STOPa 

		

		

		

	init

		[] true -> 	

			pcA':=0;

			sendM1':= false; sendM3':= false;

			Ma':= true; Ka':= true; Ta':= true; Ca':= false;

			EOOa':= false; EORa':= false; EOOk_a':= false; EORk_a':= false;

			f_EOOa':= true; f_EORa':= false; f_EOOk_a':= true; f_EORk_a':= false;

			STOPa':= false 

				



 	update 

-- calcul de Ca = h(Ka,Ma)

	[] (pcA=0) & Ma & Ka & ~Ca -> Ca':=true; pcA':=1 



-- calcul de EOOa

	[] (pcA=1) & f_EOOa & Ta & Ca -> EOOa':= true; pcA':=2



-- émission de m1

	[] (pcA=2) & f_EOOa & Ta & Ca & EOOa -> sendM1':= true; pcA':=3



-- réception de m2

	[] (pcA=3) & sendM1 & M2 -> f_EORa':= true; EORa':= true; pcA':=4



-- calcul de EOOk_a

	[] (pcA=4) & f_EOOk_a & Ta & Ka -> EOOk_a':= true; pcA':=5



-- émission de m3

	[] (pcA=5) & f_EOOk_a & Ka & EOOk_a -> sendM3':= true; pcA':=6



-- réception de m4

	[] (pcA=6) & M4 -> f_EORk_a':=true; EORk_a':=true; pcA':=7



-- arrêt de A

	[] (pcA=7) -> STOPa':=true; pcA':=8



endatom

endmodule



module Horloge
	external timer_triggered_ATmsg2, timer_triggered_ATmsg4, timer_triggered_BTmsg3 : bool
	interface TimeOut_ATmsg2, TimeOut_ATmsg4, TimeOut_BTmsg3 : bool
	private timerOn_ATmsg2, timerOn_ATmsg4, timerOn_BTmsg3 : bool
	
	atom timerr_ATmsg2
	controls TimeOut_ATmsg2, timerOn_ATmsg2
	reads timer_triggered_ATmsg2, timerOn_ATmsg2, TimeOut_ATmsg2
	
	init	[] true -> TimeOut_ATmsg2':= false; timerOn_ATmsg2':=false
	
	update
		[] timer_triggered_ATmsg2 & ~TimeOut_ATmsg2 -> timerOn_ATmsg2':=true
		[] timerOn_ATmsg2 -> 
		[] timerOn_ATmsg2 -> TimeOut_ATmsg2':=true; timerOn_ATmsg2':=false
	endatom

	
	atom timerr_ATmsg4
	controls TimeOut_ATmsg4, timerOn_ATmsg4
	reads timer_triggered_ATmsg4, timerOn_ATmsg4, TimeOut_ATmsg4
	
	init	[] true -> TimeOut_ATmsg4':= false; timerOn_ATmsg4':=false
	
	update
		[] timer_triggered_ATmsg4 & ~TimeOut_ATmsg4 -> timerOn_ATmsg4':=true
		[] timerOn_ATmsg4 -> 
		[] timerOn_ATmsg4 -> TimeOut_ATmsg4':=true; timerOn_ATmsg4':=false
	endatom

	
	atom timerr_BTmsg3
	controls TimeOut_BTmsg3, timerOn_BTmsg3
	reads timer_triggered_BTmsg3, timerOn_BTmsg3, TimeOut_BTmsg3
	
	init	[] true -> TimeOut_BTmsg3':= false; timerOn_BTmsg3':=false
	
	update
		[] timer_triggered_BTmsg3 & ~TimeOut_BTmsg3 -> timerOn_BTmsg3':=true
		[] timerOn_BTmsg3 -> 
		[] timerOn_BTmsg3 -> TimeOut_BTmsg3':=true; timerOn_BTmsg3':=false
	endatom

	atom timerr
	controls TimeOut, timerOn
	reads timer_triggered, timerOn, TimeOut
	
	init	[] true -> TimeOut':= false; timerOn':=false
	
	update
		[] timer_triggered & ~TimeOut -> timerOn':=true
		[] timerOn -> 
		[] timerOn -> TimeOut':=true; timerOn':=false
	endatom

endmodule


module Tiers_de_confiance 
	external 
		M5 : bool;
		TimeOut : bool
	interface
		sendM6, sendM7 : bool;
		L, T, K : bool;
		SUBk, CONk : bool;
		f_SUBk, f_CONk : bool
	atom Tiers_de_confiance_deterministe
	controls
		sendM6, sendM7,
		L, T, K,
		SUBk, CONk,
		f_SUBk, f_CONk 
	reads
		M5, sendM6, sendM7,
		L, T, K,
		CONk,
		f_SUBk, f_CONk,
		TimeOut
	init
		[] true ->
			sendM6':=false; sendM7':=false;
			L':=false; T':=false; K':=false;
			f_SUBk':= false; f_CONk':=false;
			SUBk':=false; CONk':=false
	update
-- demande de rétablissement par la réception de m5
	[] M5 & ~f_SUBk & ~TimeOut -> f_SUBk':=true; SUBk':=true; L':=true; T':=true; K':=true
-- calcul de CONk
	[] f_SUBk & ~CONk & L & T & K & ~f_CONk -> CONk':=true; f_CONk':=true
-- rétablissement des preuves partielles par l'émission de m6 et m7 
	[] f_CONk & CONk & L & T & K & ~sendM6 & ~sendM7 -> sendM6':=true; sendM7':=true
endatom
endmodule

module reseau_delai_fini_non_fiable_A_B_Tiers
external sendM1, sendM3, sendM2, sendM4, sendM5, sendM6, sendM7 : bool
interface M1, M3, M2, M4, M5, M6, M7 : bool

	atom canal_A2B_non_fiable
	controls M1, M3
	reads sendM1, sendM3, M1, M3
	init	[] true -> M1':=false; M3':=false
	update
-- transmission fiable de M1		
	[] sendM1 & ~M1 -> M1':=true
-- transmission non fiable de M1	
	[] sendM1 & ~M1 -> M1':=M1
-- transmission fiable de M3
	[] sendM3 & ~M3 -> M3':=true
-- transmission non fiable de M3
	[] sendM3 & ~M3 -> M3':=M3
	endatom

	atom canal_A2Tiers_fiable
	controls M5
	reads sendM5, M5
	init [] true -> M5':=false
	update
-- transmission de M5
	[] sendM5 & ~M5 -> M5':=true
endatom

	atom canal_B2A_non_fiable
	controls M2, M4
	reads sendM2, sendM4, M2, M4
	init 	[] true -> M2':=false; M4':=false
	update
-- transmission fiable de M2
	[] sendM2 & ~M2 -> M2':=true
-- transmission non fiable de M2
	[] sendM2 & ~M2 -> M2':=M2
-- transmission fiable de M4
	[] sendM4 & ~M4 -> M4':=true
-- transmission non fiable de M4
	[] sendM4 & ~M4 -> M4':=M4
endatom

atom canal_Tiers2AetB_fiable
	controls M6, M7
	reads sendM6, sendM7, M6, M7
	init [] true -> M6':=false; M7':=false
	update
-- transmission de M6
	[] sendM6 & ~M6 -> M6':=true
-- transmission de M7
	[] sendM7 & ~M7 -> M7':=true
endatom
endmodule

ZG3 := Ah || Bh || Tiers_de_confiance || reseau_delai_fini_non_fiable_A_B_Tiers || Horloge
